import telebot
import os
import re
from fz77_articles import fz77_articles
from instructions import instructions
from safety_measures import safety_text
from training_data_full import training_questions
from openai import OpenAI

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="Markdown")

client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url="https://openrouter.ai/api/v1"
)

user_context = {}

def main_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üó£ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å", "üìò –§–ó-77")
    kb.row("‚úçÔ∏è –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è", "üõ° –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    kb.row("üìö –û–±—É—á–µ–Ω–∏–µ")
    return kb

def back_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    return kb

@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "*–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –ü—Ä–æ—Ñ–°—Ç—Ä–∞–∂.*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Äî –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ `–§–ó-77`\n"
        "‚Äî –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞, –æ—Ä—É–∂–∏—é, –ß–°\n"
        "‚Äî –ù–∞–ø–∏—Å–∞—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=main_keyboard()
    )

@bot.message_handler(func=lambda m: m.text in ["üó£ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å", "üìò –§–ó-77", "‚úçÔ∏è –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è", "üõ° –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "üìö –û–±—É—á–µ–Ω–∏–µ", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"])
def menu_buttons(message):
    user_id = message.chat.id
    if message.text == "üìò –§–ó-77":
        user_context[user_id] = "fz77"
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å—Ç–∞—Ç—å—è 5 –§–ó-77'")
    elif message.text == "üó£ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å":
        user_context[user_id] = "question"
        bot.send_message(user_id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–¥–∫–ª—é—á—É –ò–ò –∏ –æ—Ç–≤–µ—á—É.")
    elif message.text == "‚úçÔ∏è –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è":
        user_context[user_id] = "explanatory"
        bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é ‚Äî —Å–æ—Å—Ç–∞–≤–ª—é –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é.")
    elif message.text == "üõ° –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
        chunks = [safety_text[i:i+4000] for i in range(0, len(safety_text), 4000)]
        for part in chunks:
            bot.send_message(user_id, part)
        bot.send_message(user_id, "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=back_keyboard())
    elif message.text == "üìö –û–±—É—á–µ–Ω–∏–µ":
        user_context[user_id] = "training"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —É—á–µ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç.")
    elif message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        user_context[user_id] = None
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    user_mode = user_context.get(user_id)
    text = message.text.strip().lower()

    if not user_mode:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
        return

    if user_mode == "fz77":
        match = re.search(r"(?:—Å—Ç–∞—Ç—å—è\s*)?(\d+)", text)
        if match:
            num = match.group(1)
            article = fz77_articles.get(num)
            bot.send_message(user_id, article if article else "–¢–∞–∫–æ–π —Å—Ç–∞—Ç—å–∏ –Ω–µ—Ç.")
        else:
            bot.send_message(user_id, "–ü—Ä–∏–º–µ—Ä: '—Å—Ç–∞—Ç—å—è 6 –§–ó-77'")
    elif user_mode in ["question", "explanatory"]:
        try:
            response = client.chat.completions.create(
                model="mistralai/mixtral-8x7b-instruct",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ö—Ä–∞–Ω—ã. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ."},
                    {"role": "user", "content": message.text}
                ]
            )
            answer = response.choices[0].message.content
            bot.send_message(user_id, answer)
        except Exception as e:
            bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò: {e}")
    elif user_mode == "training":
        found = None
        for q in training_questions:
            if all(word in q for word in text.split()):
                found = training_questions[q]
                break
        bot.send_message(user_id, found or "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ.")

if __name__ == "__main__":
    print("ProfStrazhBot –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)