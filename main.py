
import telebot
import re
from telebot import types
from fz77_articles import fz77_articles
from instructions import instructions
from safety_measures import safety_text
from training_data_full import training_questions
from openai import OpenAI

BOT_TOKEN = "7774427933:AAHlvFH6atbprmpLY7EK2vw5Rsth1hJl974"
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="Markdown")

client = OpenAI(
    api_key="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",
    base_url="https://openrouter.ai/api/v1"
)

user_context = {}

def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üó£ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å", "üìò –§–ó-77")
    kb.row("‚úçÔ∏è –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è", "üõ° –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    kb.row("üìö –û–±—É—á–µ–Ω–∏–µ")
    return kb

def back_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    return kb

@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
       "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –ü—Ä–æ—Ñ–°—Ç—Ä–∞–∂."

"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
"
        "‚Äî –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ `–§–ó-77`
"
        "‚Äî –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞, –æ—Ä—É–∂–∏—é, –ß–°
"
        "‚Äî –ù–∞–ø–∏—Å–∞—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å

"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=main_keyboard()
    )

@bot.message_handler(commands=["—Ñ–∑77"])
def fz77_short(message):
    parts = message.text.split()
    if len(parts) == 2 and parts[1].isdigit():
        article = fz77_articles.get(parts[1])
        if article:
            bot.send_message(message.chat.id, article)
        else:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π —Å—Ç–∞—Ç—å–∏ –Ω–µ—Ç.")
    else:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /—Ñ–∑77 12")

@bot.message_handler(func=lambda m: m.text in [
    "üó£ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å", "üìò –§–ó-77", "‚úçÔ∏è –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è", "üõ° –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "üìö –û–±—É—á–µ–Ω–∏–µ", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
])
def menu_buttons(message):
    user_id = message.chat.id
    if message.text == "üìò –§–ó-77":
        user_context[user_id] = "fz77"
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–°—Ç–∞—Ç—å—è 5', '—Å—Ç. 5 –§–ó-77' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '5 —Ñ–∑'.")
    elif message.text == "üó£ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å":
        user_context[user_id] = "question"
        bot.send_message(user_id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É.")
    elif message.text == "‚úçÔ∏è –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è":
        user_context[user_id] = "explanatory"
        bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è ‚Äî —è –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.")
    elif message.text == "üõ° –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
        chunks = [safety_text[i:i + 4000] for i in range(0, len(safety_text), 4000)]
        for part in chunks:
            bot.send_message(user_id, part)
        bot.send_message(user_id, "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=back_keyboard())
    elif message.text == "üìö –û–±—É—á–µ–Ω–∏–µ":
        user_context[user_id] = "training"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –æ–±—É—á–∞—é—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ.")
    elif message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        user_context[user_id] = None
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    user_mode = user_context.get(user_id)

    if not user_mode:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.", reply_markup=main_keyboard())
        return

    text = message.text.strip().lower()

    if user_mode == "fz77":
        match = re.search(r'(?:—Å—Ç\.?\s*|—Å—Ç–∞—Ç—å—è\s*)?(\d{1,2})(?=\D*—Ñ–∑\s*-?\s*77|\s*—Ñ–∑\s*|\s*-?—Ñ–∑)?', text)
        if match:
            num = match.group(1)
            article = fz77_articles.get(num)
            if article:
                bot.send_message(user_id, article)
            else:
                bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π —Å—Ç–∞—Ç—å–∏ –≤ –§–ó-77 –Ω–µ—Ç.")
        else:
            bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏. –ü—Ä–∏–º–µ—Ä: '—Å—Ç–∞—Ç—å—è 6 –§–ó-77'.")

    elif user_mode == "explanatory":
        found = None
        for key in instructions:
            if key.lower() in text:
                found = instructions[key]
                break
        if found:
            bot.send_message(user_id, found)
        else:
            try:
                response = client.chat.completions.create(
                    model="mistralai/mixtral-8x7b-instruct",
                    messages=[
                        {
                            "role": "system",
                            "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ö—Ä–∞–Ω—ã. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é ‚Äî –¥–µ–ª–∞–π —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤. –í—Å–µ–≥–¥–∞ –≤—Å—Ç–∞–≤–∞–π –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞."
                        },
                        {"role": "user", "content": message.text}
                    ]
                )
                answer = response.choices[0].message.content
                bot.send_message(user_id, answer)
            except Exception as e:
                bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:\n{e}")

    elif user_mode == "question":
        found = None
        for key in instructions:
            if key.lower() in text:
                found = instructions[key]
                break
        if found:
            bot.send_message(user_id, found)
        else:
            try:
                response = client.chat.completions.create(
                    model="mistralai/mixtral-8x7b-instruct",
                    messages=[
                        {
                            "role": "system",
                            "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ö—Ä–∞–Ω—ã. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ. –ù–µ –ø–∏—à–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ."
                        },
                        {"role": "user", "content": message.text}
                    ]
                )
                answer = response.choices[0].message.content
                bot.send_message(user_id, answer)
            except Exception as e:
                bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:\n{e}")

    elif user_mode == "training":
        found = None
        for q in training_questions:
            if all(word in q for word in text.split()):
                found = training_questions[q]
                break
        if found:
            bot.send_message(user_id, found)
        else:
            bot.send_message(user_id, "‚ùì –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –∏–Ω–∞—á–µ.")

if __name__ == "__main__":
    print("–ü—Ä–æ—Ñ–°—Ç—Ä–∞–∂ –Ω–∞ —Å–≤—è–∑–∏! –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
